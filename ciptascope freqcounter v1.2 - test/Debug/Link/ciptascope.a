;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : ciptascope
;Version : 1.1
;Date    : 05/12/2016
;Author  : siniarsa dewanata, eri anshori nurhadi
;Company : pt.cipta srigati lestari
;Comments:
;
;
;Chip type               : ATmega8A
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;#define iRSTOUT     PIND.2
;#define iDATAOUT    PIND.3
;#define oRSTCTL     PORTD.4
;#define iISOOSC     PIND.5
;#define oRXDCTL     PORTD.6
;#define oDATACTL    PORTD.7
;
;#define iISOVOUT    PINC.0
;
;#define oISP_SS     PORTB.2
;#define iISP_MOSI   PINB.3
;#define iISP_MISO   PINB.4
;#define iISP_SCK    PINB.5
;#define ISO_VCC 0
;
;// USART Transmitter: On
;#define UsartTx_On UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB ...
;// USART Transmitter: Off
;#define UsartTx_Off UCSRB =(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<T ...
;
;// Declare your global variables here
;unsigned char updatefreq; //0x01 : allowed to update freq, 0x00 : not allowed to update freq
;//unsigned char sendfinish; //0x01 : has been sent, 0x00 : has not been sent
;unsigned int counter; //counter for timer0
;unsigned int frq; //frequency of card
;unsigned int tVoltage;
;//bit status;
;bit fRSTCTL;
;unsigned char cTIMERST;
;unsigned char vCard;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 003E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003F ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0040 // Delay needed for the stabilization of the ADC input voltage
; 0000 0041 delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 0042 // Start the AD conversion
; 0000 0043 ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0044 // Wait for the AD conversion to complete
; 0000 0045 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0046 ADCSRA|=(1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0047 return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0048 }
;PCODE: $00000021 VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 004C {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 004D unsigned char i;
; 0000 004E // Place your code here
; 0000 004F     if(!iRSTOUT)
;PCODE: $00000024 VOL: 0
;	i -> R17
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0050     {
; 0000 0051         for(i=0;i<10;i++){};
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0052         if(!iRSTOUT)
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0053         {
; 0000 0054             fRSTCTL =1;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0055             cTIMERST = 50; //cTimer diubah dari v1.0 sebelumya -> 100;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0056                             //namun tetap menghasilkan delay 50ms karena timer nol interrupt setiap 1 ms
; 0000 0057          oRSTCTL =0;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0058         }
; 0000 0059     }
;PCODE: $00000040 VOL: 0
; 0000 005A }
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 005E {
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 005F // Place your code here
; 0000 0060 
; 0000 0061 }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;// SPI interrupt service routine
;interrupt [SPI_STC] void spi_isr(void)
; 0000 0064 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0065 // Place your code here
; 0000 0066     SPDR = (frq & 0xff);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0067 }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 32
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0083 {
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0084 char status,data;
; 0000 0085 status=UCSRA;
;PCODE: $00000055 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0086 data=UDR;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0087 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0088    {
; 0000 0089    rx_buffer[rx_wr_index++]=data;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 008A #if RX_BUFFER_SIZE == 256
; 0000 008B    // special case for receiver buffer size=256
; 0000 008C    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 008D #else
; 0000 008E    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 008F    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0090       {
; 0000 0091       rx_counter=0;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0092       rx_buffer_overflow=1;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0093       }
; 0000 0094 #endif
; 0000 0095    }
;PCODE: $00000071 VOL: 0
; 0000 0096 }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 009D {
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 009E char data;
; 0000 009F while (rx_counter==0);
;PCODE: $00000079 VOL: 0
;	data -> R17
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00A0 data=rx_buffer[rx_rd_index++];
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00A1 #if RX_BUFFER_SIZE != 256
; 0000 00A2 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00A3 #endif
; 0000 00A4 #asm("cli")
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
	cli
;PCODE: $0000008E VOL: 0
; 0000 00A5 --rx_counter;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00A6 #asm("sei")
;PCODE: $00000092 VOL: 0
	sei
;PCODE: $00000093 VOL: 0
; 0000 00A7 return data;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00A8 }
;PCODE: $00000097 VOL: 0
;#pragma used-
;#endif
;
;// Write a character to the USART Transmitter
;#ifndef _DEBUG_TERMINAL_IO_
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 00B1 {
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00B2 while ((UCSRA & DATA_REGISTER_EMPTY)==0);
;PCODE: $0000009A VOL: 0
;	c -> Y+0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00B3 UDR=c;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00B4 }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 00BD {
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00BE // Reinitialize Timer 0 value
; 0000 00BF //TCNT0=0xC2;v1.0
; 0000 00C0 //TCNT0=0x83;  //v1.1
; 0000 00C1 TCNT0=0x06;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00C2 // Place your code here
; 0000 00C3     if(fRSTCTL)
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00C4     {
; 0000 00C5         vCard = read_adc(0);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00C6         if(!cTIMERST--)
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00C7         {
; 0000 00C8             if(vCard >100)
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00C9             {
; 0000 00CA                 cTIMERST=0;
;PCODE: $000000B7 VOL: 0
; 0000 00CB                 fRSTCTL=0;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00CC                 oRSTCTL=1;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00CD             }
; 0000 00CE             else
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00CF             {
; 0000 00D0                 cTIMERST=5;//diubah dari v1.0 sebelumnya 10
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00D1             }
;PCODE: $000000C1 VOL: 0
; 0000 00D2         }
; 0000 00D3         TCNT1H =0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00D4         TCNT1L =0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00D5         counter = 0;
;PCODE: $000000C7 VOL: 0
; 0000 00D6         SPDR=0x12;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00D7     }
; 0000 00D8     else //v1.1   scan freq
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00D9     {
; 0000 00DA         counter++;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00DB         TCNT0=0x06;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00DC         if(counter>=1) //freq sampling per 1ms
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00DD         {
; 0000 00DE             counter=0;
;PCODE: $000000D4 VOL: 0
; 0000 00DF             #asm ("cli");
;PCODE: $000000D5 VOL: 0
	cli
;PCODE: $000000D6 VOL: 0
; 0000 00E0             frq = TCNT1;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00E1             if(frq >= 0x1770) //frequency too high, more than 6MHz
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00E2             {
; 0000 00E3                 frq =0x0001;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00E4             }
; 0000 00E5             else{  // frequency valid
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00E6 
; 0000 00E7             }
;PCODE: $000000E0 VOL: 0
; 0000 00E8             SPDR = (frq & 0xff00)>>8;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00E9             TCNT1H =0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00EA             TCNT1L =0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00EB             #asm("sei");
;PCODE: $000000E9 VOL: 0
	sei
;PCODE: $000000EA VOL: 0
; 0000 00EC 	    }
; 0000 00ED     }
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00EE }
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 00F1 {
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00F2 // Place your code here
; 0000 00F3 //    if(status)
; 0000 00F4 //    {
; 0000 00F5 //        RXDCTL = 1;
; 0000 00F6 //        status = 0;
; 0000 00F7 //    }
; 0000 00F8 //    else
; 0000 00F9 //    {
; 0000 00FA //        RXDCTL = 0;
; 0000 00FB //        status = 1;
; 0000 00FC //    }
; 0000 00FD }
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;
;
;
;void main(void)
; 0000 0102 {
;PCODE: $000000F5 VOL: 0
; 0000 0103 // Declare your local variables here
; 0000 0104 
; 0000 0105 // Input/Output Ports initialization
; 0000 0106 // Port B initialization
; 0000 0107 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=In
; 0000 0108 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0109 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 010A PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 010B 
; 0000 010C // Port C initialization
; 0000 010D // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 010E DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 010F // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0110 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0111 
; 0000 0112 // Port D initialization
; 0000 0113 // Function: Bit7=Out Bit6=Out Bit5=In Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0114 DDRD=(1<<DDD7) | (1<<DDD6) | (0<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0115 // State: Bit7=0 Bit6=1 Bit5=T Bit4=1 Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0116 PORTD=(0<<PORTD7) | (1<<PORTD6) | (0<<PORTD5) | (1<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0117 
; 0000 0118 // Timer/Counter 0 initialization
; 0000 0119 // Clock source: System Clock
; 0000 011A // Clock value: 250,000 kHz
; 0000 011B TCCR0=(0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 011C TCNT0=0x06;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 011D 
; 0000 011E // Timer/Counter 1 initialization
; 0000 011F // Clock source: T1 pin Rising Edge
; 0000 0120 // Mode: Normal top=0xFFFF
; 0000 0121 // OC1A output: Disconnected
; 0000 0122 // OC1B output: Disconnected
; 0000 0123 // Noise Canceler: Off
; 0000 0124 // Input Capture on Falling Edge
; 0000 0125 // Timer1 Overflow Interrupt: On
; 0000 0126 // Input Capture Interrupt: Off
; 0000 0127 // Compare A Match Interrupt: Off
; 0000 0128 // Compare B Match Interrupt: Off
; 0000 0129 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 012A TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 012B TCNT1H=0x00;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 012C TCNT1L=0x00;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 012D ICR1H=0x00;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 012E ICR1L=0x00;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 012F OCR1AH=0x00;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0130 OCR1AL=0x00;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0131 OCR1BH=0x00;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0132 OCR1BL=0x00;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0133 
; 0000 0134 // Timer/Counter 2 initialization
; 0000 0135 // Clock source: System Clock
; 0000 0136 // Clock value: Timer2 Stopped
; 0000 0137 // Mode: Normal top=0xFF
; 0000 0138 // OC2 output: Disconnected
; 0000 0139 ASSR=0<<AS2;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 013A TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 013B TCNT2=0x00;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 013C OCR2=0x00;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 013D 
; 0000 013E // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 013F TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (1<<TOIE0);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0140 
; 0000 0141 // External Interrupt(s) initialization
; 0000 0142 // INT0: On
; 0000 0143 // INT0 Mode: Falling Edge
; 0000 0144 // INT1: On
; 0000 0145 // INT1 Mode: Any change
; 0000 0146 GICR|=(1<<INT1) | (1<<INT0);
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0147 MCUCR=(0<<ISC11) | (1<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0148 GIFR=(1<<INTF1) | (1<<INTF0);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0149 
; 0000 014A // USART initialization
; 0000 014B // Communication Parameters: 8 Data, 1 Stop, Even Parity
; 0000 014C // USART Receiver: On
; 0000 014D // USART Transmitter: On
; 0000 014E // USART Mode: Asynchronous
; 0000 014F // USART Baud Rate: 9600
; 0000 0150 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0151 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0152 UCSRC=(1<<URSEL) | (0<<UMSEL) | (1<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0153 UBRRH=0x00;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0154 UBRRL=0x33;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0155 
; 0000 0156 // Analog Comparator initialization
; 0000 0157 // Analog Comparator: Off
; 0000 0158 // The Analog Comparator's positive input is
; 0000 0159 // connected to the AIN0 pin
; 0000 015A // The Analog Comparator's negative input is
; 0000 015B // connected to the AIN1 pin
; 0000 015C ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 015D 
; 0000 015E 
; 0000 015F // ADC initialization
; 0000 0160 // ADC Clock frequency: 1000,000 kHz
; 0000 0161 // ADC Voltage Reference: AREF pin
; 0000 0162 ADMUX=ADC_VREF_TYPE;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0163 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0164 SFIOR=(0<<ACME);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0165 
; 0000 0166 
; 0000 0167 // SPI initialization
; 0000 0168 // SPI Type: Slave
; 0000 0169 // SPI Clock Phase: Cycle Start
; 0000 016A // SPI Clock Polarity: Low
; 0000 016B // SPI Data Order: MSB First
; 0000 016C SPCR=(1<<SPIE) | (1<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 016D SPSR=(0<<SPI2X);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 016E 
; 0000 016F // Clear the SPI interrupt flag
; 0000 0170 #asm
;PCODE: $00000141 VOL: 0
; 0000 0171     in   r30,spsr
    in   r30,spsr
;PCODE: $00000142 VOL: 0
; 0000 0172     in   r30,spdr
    in   r30,spdr
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0173 #endasm
; 0000 0174 
; 0000 0175 // TWI initialization
; 0000 0176 // TWI disabled
; 0000 0177 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0178 
; 0000 0179 //putchar('s');
; 0000 017A tVoltage = read_adc(ISO_VCC);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 017B //putchar((tVoltage&0xFF) +0x30);
; 0000 017C //putchar(((tVoltage>>8)&0xFF) +0x30);
; 0000 017D 
; 0000 017E // Global enable interrupts
; 0000 017F #asm("sei")
;PCODE: $0000014A VOL: 0
	sei
;PCODE: $0000014B VOL: 0
; 0000 0180 //UsartTx_Off;
; 0000 0181 //initialize the global variable
; 0000 0182             counter=0;
;PCODE: $0000014C VOL: 0
; 0000 0183            updatefreq = 0x01;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0184            SPDR =0;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0185 while (1)
;PCODE: $00000151 VOL: 0
; 0000 0186       {
; 0000 0187       // Place your code here
; 0000 0188 
; 0000 0189       }
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 018A }
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
